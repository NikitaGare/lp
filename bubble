#include <iostream>
#ifdef _OPENMP
#include <omp.h>
#else
#include <ctime> // fallback timer
#endif
#include <iomanip> // To control decimal precision

using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

void sequentialBubbleSort(int *a, int n) {
    for (int i = 0; i < n; i++) {
        bool swapped = false;
        for (int j = 0; j < n - 1; j++) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
                swapped = true;
            }
        }
        if (!swapped)
            break;
    }
}

void parallelBubbleSort(int *a, int n) {
    for (int i = 0; i < n; i++) {
        bool swapped = false;

        // Parallelize the inner loop using OpenMP
        #ifdef _OPENMP
        #pragma omp parallel for shared(a) reduction(|:swapped)
        #endif
        for (int j = 0; j < n - 1; j++) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
                swapped = true;
            }
        }

        if (!swapped)
            break;
    }
}

double getTime() {
    #ifdef _OPENMP
    return omp_get_wtime(); // OpenMP timer
    #else
    return static_cast<double>(clock()) / CLOCKS_PER_SEC; // Fallback timer
    #endif
}

int main() {
    int n;
    cout << "Enter total number of elements: ";
    cin >> n;

    int *a = new int[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    // Sequential sort
    int *seq_a = new int[n];
    for (int i = 0; i < n; i++) {
        seq_a[i] = a[i];
    }

    double start_time = getTime();
    sequentialBubbleSort(seq_a, n);
    double end_time = getTime();

    cout << "\nSorted array (Sequential): ";
    for (int i = 0; i < n; i++) {
        cout << seq_a[i] << " ";
    }
    cout << "\nTime taken by sequential algorithm: "
         << fixed << setprecision(6) << (end_time - start_time) << " seconds\n";

    // Parallel sort
    int *par_a = new int[n];
    for (int i = 0; i < n; i++) {
        par_a[i] = a[i];
    }

    start_time = getTime();
    parallelBubbleSort(par_a, n);
    end_time = getTime();

    cout << "\nSorted array (Parallel): ";
    for (int i = 0; i < n; i++) {
        cout << par_a[i] << " ";
    }
    cout << "\nTime taken by parallel algorithm: "
         << fixed << setprecision(6) << (end_time - start_time) << " seconds\n";

    delete[] a;
    delete[] seq_a;
    delete[] par_a;

    return 0;
}
