#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];

void dfs(int node) {
    // Mark the node as visited and print it
    #pragma omp critical
    {
        if (visited[node]) return;
        visited[node] = true;
        cout << node << " ";
    }

    // Visit all unvisited neighbors sequentially
    for (int i = 0; i < graph[node].size(); ++i) {
        int neighbor = graph[node][i];

        bool visit_now;
        #pragma omp critical
        visit_now = !visited[neighbor];

        if (visit_now) {
            dfs(neighbor);
        }
    }
}

int main() {
    int n, m, start;
    cout << "Enter number of nodes, edges, and starting node:\n";
    cin >> n >> m >> start;

    cout << "Enter edges (u v):\n";
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);  // undirected graph
    }

    // Initialize visited array
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    cout << "Parallel DFS traversal:\n";

    // Explore the starting node
    #pragma omp parallel
    {
        #pragma omp single
        {
            visited[start] = true;
            cout << start << " ";

            // For each neighbor of start node, spawn a parallel task
            for (int i = 0; i < graph[start].size(); ++i) {
                int neighbor = graph[start][i];

                #pragma omp task firstprivate(neighbor)
                {
                    dfs(neighbor);
                }
            }
        }
    }

    cout << endl;
    return 0;
}
